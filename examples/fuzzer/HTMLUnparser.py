# Generated by Grammarinator 17.7r

from itertools import chain
from grammarinator.runtime import *

import HTMLUnlexer

def html_space_transformer(node):

    for child in node.children:
        html_space_transformer(child)

    if isinstance(node, UnparserRule):
        new_children = []
        for child in node.children:
            new_children.append(child)
            if child.name == 'htmlTagName' and child.right_sibling and child.right_sibling.name == 'htmlAttribute' \
                    or child.name == 'htmlAttribute' \
                    or isinstance(child, UnlexerRule) and child.src and child.src.endswith(('<script', '<style', '<?xml')):
                new_children.append(UnlexerRule(src=' '))
        node.children = new_children

    return node



class HTMLUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(HTMLUnparser, self).__init__()
        self.unlexer = unlexer
        self.set_options()

    def set_options(self):
        self.options = dict(tokenVocab="HTMLLexer", dot="any_unicode_char")

    
    def endOfHtmlElement(self):
        pass
    @depthcontrol
    def htmlDocument(self):
        current = self.create_node(UnparserRule(name='htmlDocument'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_119', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_119', choice)] = self.unlexer.weights.get(('alt_119', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.scriptlet()
                elif choice == 1:
                    current += self.unlexer.SEA_WS()

        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.xml()

        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_124', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_124', choice)] = self.unlexer.weights.get(('alt_124', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.scriptlet()
                elif choice == 1:
                    current += self.unlexer.SEA_WS()

        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.dtd()

        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_129', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_129', choice)] = self.unlexer.weights.get(('alt_129', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.scriptlet()
                elif choice == 1:
                    current += self.unlexer.SEA_WS()

        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_more():
                current += self.htmlElements()

        return current
    htmlDocument.min_depth = 0

    @depthcontrol
    def htmlElements(self):
        current = self.create_node(UnparserRule(name='htmlElements'))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                current += self.htmlMisc()

        current += self.htmlElement()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                current += self.htmlMisc()

        return current
    htmlElements.min_depth = 3

    @depthcontrol
    def htmlElement(self):
        local_ctx = dict()
        current = self.create_node(UnparserRule(name='htmlElement'))
        choice = self.choice([0 if [3, 3, 3, 2, 2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_135', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_135', choice)] = self.unlexer.weights.get(('alt_135', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.TAG_OPEN()
            current += self.htmlTagName()
            local_ctx['open_tag'] = current.last_child
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_more():
                    current += self.htmlAttribute()

            current += self.unlexer.TAG_CLOSE()
            current += self.htmlContent()
            current += self.unlexer.TAG_OPEN()
            current += self.unlexer.TAG_SLASH()
            current += self.htmlTagName()
            current.last_child = local_ctx['open_tag'].deepcopy()
            current += self.unlexer.TAG_CLOSE()
            self.endOfHtmlElement()
        elif choice == 1:
            current += self.unlexer.TAG_OPEN()
            current += self.htmlTagName()
            local_ctx['open_tag'] = current.last_child
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_more():
                    current += self.htmlAttribute()

            current += self.unlexer.TAG_SLASH_CLOSE()
            self.endOfHtmlElement()
        elif choice == 2:
            current += self.unlexer.TAG_OPEN()
            current += self.htmlTagName()
            local_ctx['open_tag'] = current.last_child
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_more():
                    current += self.htmlAttribute()

            current += self.unlexer.TAG_CLOSE()
            self.endOfHtmlElement()
        elif choice == 3:
            current += self.scriptlet()
        elif choice == 4:
            current += self.script()
        elif choice == 5:
            current += self.style()
        return current
    htmlElement.min_depth = 2

    @depthcontrol
    def htmlContent(self):
        current = self.create_node(UnparserRule(name='htmlContent'))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.htmlChardata()

        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [3, 2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_151', i), 1) for i, w in enumerate([1, 1, 1])])
                self.unlexer.weights[('alt_151', choice)] = self.unlexer.weights.get(('alt_151', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.htmlElement()
                elif choice == 1:
                    current += self.xhtmlCDATA()
                elif choice == 2:
                    current += self.htmlComment()
                if self.unlexer.max_depth >= 2:
                    for _ in self.zero_or_one():
                        current += self.htmlChardata()


        return current
    htmlContent.min_depth = 0

    @depthcontrol
    def htmlAttribute(self):
        local_ctx = dict()
        current = self.create_node(UnparserRule(name='htmlAttribute'))
        choice = self.choice([0 if [4, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_156', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_156', choice)] = self.unlexer.weights.get(('alt_156', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.htmlAttributeName()
            local_ctx['attr_name'] = current.last_child
            current += self.unlexer.TAG_EQUALS()
            current += self.htmlAttributeValue()
        elif choice == 1:
            current += self.htmlAttributeName()
            local_ctx['attr_name'] = current.last_child
        return current
    htmlAttribute.min_depth = 3

    @depthcontrol
    def htmlAttributeName(self):
        current = self.create_node(UnparserRule(name='htmlAttributeName'))
        current += self.unlexer.TAG_NAME()
        return current
    htmlAttributeName.min_depth = 2

    @depthcontrol
    def htmlAttributeValue(self):
        current = self.create_node(UnparserRule(name='htmlAttributeValue'))
        current += self.unlexer.ATTVALUE_VALUE()
        return current
    htmlAttributeValue.min_depth = 3

    @depthcontrol
    def htmlTagName(self):
        current = self.create_node(UnparserRule(name='htmlTagName'))
        current += self.unlexer.TAG_NAME()
        return current
    htmlTagName.min_depth = 2

    @depthcontrol
    def htmlChardata(self):
        current = self.create_node(UnparserRule(name='htmlChardata'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_159', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_159', choice)] = self.unlexer.weights.get(('alt_159', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.HTML_TEXT()
        elif choice == 1:
            current += self.unlexer.SEA_WS()
        return current
    htmlChardata.min_depth = 1

    @depthcontrol
    def htmlMisc(self):
        current = self.create_node(UnparserRule(name='htmlMisc'))
        choice = self.choice([0 if [2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_162', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_162', choice)] = self.unlexer.weights.get(('alt_162', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.htmlComment()
        elif choice == 1:
            current += self.unlexer.SEA_WS()
        return current
    htmlMisc.min_depth = 1

    @depthcontrol
    def htmlComment(self):
        current = self.create_node(UnparserRule(name='htmlComment'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_165', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_165', choice)] = self.unlexer.weights.get(('alt_165', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.HTML_COMMENT()
        elif choice == 1:
            current += self.unlexer.HTML_CONDITIONAL_COMMENT()
        return current
    htmlComment.min_depth = 1

    @depthcontrol
    def xhtmlCDATA(self):
        current = self.create_node(UnparserRule(name='xhtmlCDATA'))
        current += self.unlexer.CDATA()
        return current
    xhtmlCDATA.min_depth = 1

    @depthcontrol
    def dtd(self):
        current = self.create_node(UnparserRule(name='dtd'))
        current += self.unlexer.DTD()
        return current
    dtd.min_depth = 1

    @depthcontrol
    def xml(self):
        current = self.create_node(UnparserRule(name='xml'))
        current += self.unlexer.XML_DECLARATION()
        return current
    xml.min_depth = 1

    @depthcontrol
    def scriptlet(self):
        current = self.create_node(UnparserRule(name='scriptlet'))
        current += self.unlexer.SCRIPTLET()
        return current
    scriptlet.min_depth = 1

    @depthcontrol
    def script(self):
        current = self.create_node(UnparserRule(name='script'))
        current += self.unlexer.SCRIPT_OPEN()
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_168', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_168', choice)] = self.unlexer.weights.get(('alt_168', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.SCRIPT_BODY()
        elif choice == 1:
            current += self.unlexer.SCRIPT_SHORT_BODY()
        return current
    script.min_depth = 1

    @depthcontrol
    def style(self):
        current = self.create_node(UnparserRule(name='style'))
        current += self.unlexer.STYLE_OPEN()
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_171', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_171', choice)] = self.unlexer.weights.get(('alt_171', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.STYLE_BODY()
        elif choice == 1:
            current += self.unlexer.STYLE_SHORT_BODY()
        return current
    style.min_depth = 1

    default_rule = htmlDocument

